import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import createAppearance from './createAppearance';
import missingStateWarning from './missingStateWarning';
var defaultState = '& + div';
var disabledState = '&[disabled] + div';
var hoverState = '&:not([disabled]):hover + div';
var focusState = '&:not([disabled]):focus + div';
var activeState = '&:not([disabled]):active + div';
var checkedState = '&:checked + div, &[type=checkbox]:indeterminate + div';
var checkedHoverState = '&:not([disabled]):checked:hover + div, &[type=checkbox]:not([disabled]):indeterminate:hover + div';
var checkedActiveState = '&:not([disabled]):checked:active + div, &[type=checkbox]:not([disabled]):indeterminate:active + div';
var checkedDisabledState = '&[disabled]:checked + div, &[type=checkbox][disabled]:indeterminate + div';
var hiddenCheckboxStyle = {
  border: '0',
  clip: 'rect(1px, 1px, 1px, 1px)',
  height: '1',
  overflow: 'hidden',
  padding: '0',
  position: 'absolute',
  whiteSpace: 'nowrap',
  width: '1',
  opacity: '0'
};
var baseStyle = {
  WebkitFontSmoothing: 'antialiased',
  textDecoration: 'none',
  WebkitAppearance: 'none',
  MozAppearance: 'none',
  border: 'none',
  outline: 'none',
  cursor: 'pointer'
};
var checkedStyles = {
  '& > svg': {
    display: 'block'
  }
};
/**
 * @param {object} items - object with a set of items.
 * @return {object} the final appearance.
 */

var createCheckboxAppearance = function createCheckboxAppearance() {
  var _objectSpread2;

  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  missingStateWarning({
    items: items,
    props: ['base', 'hover', 'focus', 'active', 'disabled', 'checked', 'checkedDisabled', 'checkedHover', 'checkedActive'],
    cb: function cb(prop) {
      console.error("Themer.createCheckboxAppearance() is missing a ".concat(prop, " state in items:"), items);
    }
  });
  return _objectSpread({}, hiddenCheckboxStyle, (_objectSpread2 = {
    '& + div > svg': {
      display: 'none'
    }
  }, _defineProperty(_objectSpread2, defaultState, _objectSpread({}, baseStyle, {}, createAppearance(items.base))), _defineProperty(_objectSpread2, hoverState, createAppearance(items.hover)), _defineProperty(_objectSpread2, focusState, createAppearance(items.focus)), _defineProperty(_objectSpread2, activeState, createAppearance(items.active)), _defineProperty(_objectSpread2, disabledState, createAppearance(items.disabled)), _defineProperty(_objectSpread2, checkedState, _objectSpread({}, checkedStyles, {}, createAppearance(items.checked))), _defineProperty(_objectSpread2, checkedHoverState, _objectSpread({}, checkedStyles, {}, createAppearance(items.checkedHover))), _defineProperty(_objectSpread2, checkedDisabledState, _objectSpread({}, checkedStyles, {}, createAppearance(items.checkedDisabled))), _defineProperty(_objectSpread2, checkedActiveState, _objectSpread({}, checkedStyles, {}, createAppearance(items.checkedActive))), _objectSpread2));
};

export default createCheckboxAppearance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90aGVtZXIvc3JjL2NyZWF0ZUNoZWNrYm94QXBwZWFyYW5jZS5qcyJdLCJuYW1lcyI6WyJjcmVhdGVBcHBlYXJhbmNlIiwibWlzc2luZ1N0YXRlV2FybmluZyIsImRlZmF1bHRTdGF0ZSIsImRpc2FibGVkU3RhdGUiLCJob3ZlclN0YXRlIiwiZm9jdXNTdGF0ZSIsImFjdGl2ZVN0YXRlIiwiY2hlY2tlZFN0YXRlIiwiY2hlY2tlZEhvdmVyU3RhdGUiLCJjaGVja2VkQWN0aXZlU3RhdGUiLCJjaGVja2VkRGlzYWJsZWRTdGF0ZSIsImhpZGRlbkNoZWNrYm94U3R5bGUiLCJib3JkZXIiLCJjbGlwIiwiaGVpZ2h0Iiwib3ZlcmZsb3ciLCJwYWRkaW5nIiwicG9zaXRpb24iLCJ3aGl0ZVNwYWNlIiwid2lkdGgiLCJvcGFjaXR5IiwiYmFzZVN0eWxlIiwiV2Via2l0Rm9udFNtb290aGluZyIsInRleHREZWNvcmF0aW9uIiwiV2Via2l0QXBwZWFyYW5jZSIsIk1vekFwcGVhcmFuY2UiLCJvdXRsaW5lIiwiY3Vyc29yIiwiY2hlY2tlZFN0eWxlcyIsImRpc3BsYXkiLCJjcmVhdGVDaGVja2JveEFwcGVhcmFuY2UiLCJpdGVtcyIsInByb3BzIiwiY2IiLCJwcm9wIiwiY29uc29sZSIsImVycm9yIiwiYmFzZSIsImhvdmVyIiwiZm9jdXMiLCJhY3RpdmUiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJjaGVja2VkSG92ZXIiLCJjaGVja2VkRGlzYWJsZWQiLCJjaGVja2VkQWN0aXZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPQSxnQkFBUCxNQUE2QixvQkFBN0I7QUFDQSxPQUFPQyxtQkFBUCxNQUFnQyx1QkFBaEM7QUFFQSxJQUFNQyxZQUFZLEdBQUcsU0FBckI7QUFDQSxJQUFNQyxhQUFhLEdBQUcsbUJBQXRCO0FBQ0EsSUFBTUMsVUFBVSxHQUFHLCtCQUFuQjtBQUNBLElBQU1DLFVBQVUsR0FBRywrQkFBbkI7QUFDQSxJQUFNQyxXQUFX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cnQgY3JlYXRlQXBwZWFyYW5jZSBmcm9tICcuL2NyZWF0ZUFwcGVhcmFuY2UnXG5pbXBvcnQgbWlzc2luZ1N0YXRlV2FybmluZyBmcm9tICcuL21pc3NpbmdTdGF0ZVdhcm5pbmcnXG5cbmNvbnN0IGRlZmF1bHRTdGF0ZSA9ICcmICsgZGl2J1xuY29uc3QgZGlzYWJsZWRTdGF0ZSA9ICcmW2Rpc2FibGVkXSArIGRpdidcbmNvbnN0IGhvdmVyU3RhdGUgPSAnJjpub3QoW2Rpc2FibGVkXSk6aG92ZXIgKyBkaXYnXG5jb25zdCBmb2N1c1N0YXRlID0gJyY6bm90KFtkaXNhYmxlZF0pOmZvY3VzICsgZGl2J1xuY29uc3QgYWN0aXZlU3RhdGUgPSAnJjpub3QoW2Rpc2FibGVkXSk6YWN0aXZlICsgZGl2J1xuY29uc3QgY2hlY2tlZFN0YXRlID0gJyY6Y2hlY2tlZCArIGRpdiwgJlt0eXBlPWNoZWNrYm94XTppbmRldGVybWluYXRlICsgZGl2J1xuY29uc3QgY2hlY2tlZEhvdmVyU3RhdGUgPVxuICAnJjpub3QoW2Rpc2FibGVkXSk6Y2hlY2tlZDpob3ZlciArIGRpdiwgJlt0eXBlPWNoZWNrYm94XTpub3QoW2Rpc2FibGVkXSk6aW5kZXRlcm1pbmF0ZTpob3ZlciArIGRpdidcbmNvbnN0IGNoZWNrZWRBY3RpdmVTdGF0ZSA9XG4gICcmOm5vdChbZGlzYWJsZWRdKTpjaGVja2VkOmFjdGl2ZSArIGRpdiwgJlt0eXBlPWNoZWNrYm94XTpub3QoW2Rpc2FibGVkXSk6aW5kZXRlcm1pbmF0ZTphY3RpdmUgKyBkaXYnXG5jb25zdCBjaGVja2VkRGlzYWJsZWRTdGF0ZSA9XG4gICcmW2Rpc2FibGVkXTpjaGVja2VkICsgZGl2LCAmW3R5cGU9Y2hlY2tib3hdW2Rpc2FibGVkXTppbmRldGVybWluYXRlICsgZGl2J1xuXG5jb25zdCBoaWRkZW5DaGVja2JveFN0eWxlID0ge1xuICBib3JkZXI6ICcwJyxcbiAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gIGhlaWdodDogJzEnLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBhZGRpbmc6ICcwJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICB3aWR0aDogJzEnLFxuICBvcGFjaXR5OiAnMCdcbn1cblxuY29uc3QgYmFzZVN0eWxlID0ge1xuICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICBXZWJraXRBcHBlYXJhbmNlOiAnbm9uZScsXG4gIE1vekFwcGVhcmFuY2U6ICdub25lJyxcbiAgYm9yZGVyOiAnbm9uZScsXG4gIG91dGxpbmU6ICdub25lJyxcbiAgY3Vyc29yOiAncG9pbnRlcidcbn1cblxuY29uc3QgY2hlY2tlZFN0eWxlcyA9IHtcbiAgJyYgPiBzdmcnOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJ1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGl0ZW1zIC0gb2JqZWN0IHdpdGggYSBzZXQgb2YgaXRlbXMuXG4gKiBAcmV0dXJuIHtvYmplY3R9IHRoZSBmaW5hbCBhcHBlYXJhbmNlLlxuICovXG5jb25zdCBjcmVhdGVDaGVja2JveEFwcGVhcmFuY2UgPSAoaXRlbXMgPSB7fSkgPT4ge1xuICBtaXNzaW5nU3RhdGVXYXJuaW5nKHtcbiAgICBpdGVtcyxcbiAgICBwcm9wczogW1xuICAgICAgJ2Jhc2UnLFxuICAgICAgJ2hvdmVyJyxcbiAgICAgICdmb2N1cycsXG4gICAgICAnYWN0aXZlJyxcbiAgICAgICdkaXNhYmxlZCcsXG4gICAgICAnY2hlY2tlZCcsXG4gICAgICAnY2hlY2tlZERpc2FibGVkJyxcbiAgICAgICdjaGVja2VkSG92ZXInLFxuICAgICAgJ2NoZWNrZWRBY3RpdmUnXG4gICAgXSxcbiAgICBjYjogcHJvcCA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgVGhlbWVyLmNyZWF0ZUNoZWNrYm94QXBwZWFyYW5jZSgpIGlzIG1pc3NpbmcgYSAke3Byb3B9IHN0YXRlIGluIGl0ZW1zOmAsXG4gICAgICAgIGl0ZW1zXG4gICAgICApXG4gICAgfVxuICB9KVxuXG4gIHJldHVybiB7XG4gICAgLi4uaGlkZGVuQ2hlY2tib3hTdHlsZSxcbiAgICAnJiArIGRpdiA+IHN2Zyc6IHsgZGlzcGxheTogJ25vbmUnIH0sXG4gICAgW2RlZmF1bHRTdGF0ZV06IHsgLi4uYmFzZVN0eWxlLCAuLi5jcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmJhc2UpIH0sXG4gICAgW2hvdmVyU3RhdGVdOiBjcmVhdGVBcHBlYXJhbmNlKGl0ZW1zLmhvdmVyKSxcbiAgICBbZm9jdXNTdGF0ZV06IGNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuZm9jdXMpLFxuICAgIFthY3RpdmVTdGF0ZV06IGNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuYWN0aXZlKSxcbiAgICBbZGlzYWJsZWRTdGF0ZV06IGNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuZGlzYWJsZWQpLFxuICAgIFtjaGVja2VkU3RhdGVdOiB7IC4uLmNoZWNrZWRTdHlsZXMsIC4uLmNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuY2hlY2tlZCkgfSxcbiAgICBbY2hlY2tlZEhvdmVyU3RhdGVdOiB7XG4gICAgICAuLi5jaGVja2VkU3R5bGVzLFxuICAgICAgLi4uY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5jaGVja2VkSG92ZXIpXG4gICAgfSxcbiAgICBbY2hlY2tlZERpc2FibGVkU3RhdGVdOiB7XG4gICAgICAuLi5jaGVja2VkU3R5bGVzLFxuICAgICAgLi4uY3JlYXRlQXBwZWFyYW5jZShpdGVtcy5jaGVja2VkRGlzYWJsZWQpXG4gICAgfSxcbiAgICBbY2hlY2tlZEFjdGl2ZVN0YXRlXToge1xuICAgICAgLi4uY2hlY2tlZFN0eWxlcyxcbiAgICAgIC4uLmNyZWF0ZUFwcGVhcmFuY2UoaXRlbXMuY2hlY2tlZEFjdGl2ZSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ2hlY2tib3hBcHBlYXJhbmNlXG4iXX0=