import { Themer } from '../../../../themer';
import memoizeClassName from '../utils/memoizeClassName';
import scales from '../foundational-styles/scales';
import palette from '../foundational-styles/palette';
var InputAppearances = {};
InputAppearances["default"] = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white',
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N5A, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base, ", inset 0 1px 2px ").concat(scales.neutral.N4A)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    boxShadow: "inset 0 0 2px ".concat(scales.neutral.N4A, ", inset 0 0 0 1px ").concat(scales.blue.B7, ", 0 0 0 3px ").concat(scales.blue.B4A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.neutral = Themer.createInputAppearance({
  base: {
    backgroundColor: scales.neutral.N2A
  },
  invalid: {
    boxShadow: "inset 0 0 0 1px ".concat(palette.red.base)
  },
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none',
    backgroundColor: 'white',
    boxShadow: "0 0 0 2px ".concat(scales.blue.B6A)
  },
  disabled: {
    boxShadow: "inset 0 0 0 1px ".concat(scales.neutral.N4A),
    backgroundColor: scales.neutral.N2
  }
});
InputAppearances.none = Themer.createInputAppearance({
  base: {
    backgroundColor: 'white'
  },
  invalid: {},
  placeholder: {
    color: scales.neutral.N6A
  },
  focus: {
    outline: 'none'
  },
  disabled: {
    backgroundColor: scales.neutral.N2
  }
});
/**
 * Get the appearance of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {Object} the appearance object.
 */

var getTextInputAppearance = function getTextInputAppearance(appearance) {
  switch (appearance) {
    case 'neutral':
      return InputAppearances.neutral;

    case 'none':
      return InputAppearances.none;

    default:
      return InputAppearances["default"];
  }
};
/**
 * Get the className of a `TextInput`.
 * @param {string} appearance - the appearance name
 * @return {string} the appearance class name.
 */


export default memoizeClassName(getTextInputAppearance);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90aGVtZS9zcmMvZGVmYXVsdC10aGVtZS9jb21wb25lbnQtc3BlY2lmaWMvZ2V0VGV4dElucHV0Q2xhc3NOYW1lLmpzIl0sIm5hbWVzIjpbIlRoZW1lciIsIm1lbW9pemVDbGFzc05hbWUiLCJzY2FsZXMiLCJwYWxldHRlIiwiSW5wdXRBcHBlYXJhbmNlcyIsImNyZWF0ZUlucHV0QXBwZWFyYW5jZSIsImJhc2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3hTaGFkb3ciLCJuZXV0cmFsIiwiTjVBIiwiTjRBIiwiaW52YWxpZCIsInJlZCIsInBsYWNlaG9sZGVyIiwiY29sb3IiLCJONkEiLCJmb2N1cyIsIm91dGxpbmUiLCJibHVlIiwiQjciLCJCNEEiLCJkaXNhYmxlZCIsIk4yIiwiTjJBIiwiQjZBIiwibm9uZSIsImdldFRleHRJbnB1dEFwcGVhcmFuY2UiLCJhcHBlYXJhbmNlIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxNQUFULFFBQXVCLG9CQUF2QjtBQUNBLE9BQU9DLGdCQUFQLE1BQTZCLDJCQUE3QjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsK0JBQW5CO0FBQ0EsT0FBT0MsT0FBUCxNQUFvQixnQ0FBcEI7QUFFQSxJQUFNQyxnQkFBZ0IsR0FBRyxFQUF6QjtBQUVBQSxnQkFBZ0IsV0FBaEIsR0FBMkJKLE1BQU0sQ0FBQ0sscUJBQVAsQ0FBNkI7QUFDdERDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxlQUFlLEVBQUUsT0FEYjtBQUVKQyxJQUFBQSxTQUFTLDRCQUFxQk4sTUFBTSxDQUFDTyxPQUFQLENBQWVDLEdBQXBDLCtCQUNQUixNQUFNLENBQUNPLE9BQVAsQ0FBZUUsR0FEUjtBQUZMLEdBRGdEO0FBT3REQyxFQUFBQSxPQUFPLEVBQUU7QUFDUEosSUFBQUEsU0FBUyw0QkFBcUJMLE9BQU8sQ0FBQ1UsR0FBUixDQUFZUCxJQUFqQywrQkFDUEosTUFBTSxDQUFDTyxPQUFQLENBQWVFLEdBRFI7QUFERixHQVA2QztBQVl0REcsRUFBQUEsV0FBVyxFQUFFO0FBQ1hDLElBQUFBLEtBQUssRUFBRWIsTUFBTSxDQUFDTyxPQUFQLENBQWVPO0FBRFgsR0FaeUM7QUFldERDLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxPQUFPLEVBQUUsTUFESjtBQUVMVixJQUFBQSxTQUFTLDBCQUFtQk4sTUFBTSxDQUFDTyxPQUFQLENBQWVFLEdBQWxDLCtCQUNQVCxNQUFNLENBQUNpQixJQUFQLENBQVlDLEVBREwseUJBRU1sQixNQUFNLENBQUNpQixJQUFQLENBQVlFLEdBRmxCO0FBRkosR0FmK0M7QUFxQnREQyxFQUFBQSxRQUFRLEVBQUU7QUFDUmQsSUFBQUEsU0FBUyw0QkFBcUJOLE1BQU0sQ0FBQ08sT0FBUCxDQUFlRSxHQUFwQyxDQUREO0FBRVJKLElBQUFBLGVBQWUsRUFBRUwsTUFBTSxDQUFDTyxPQUFQLENBQWVjO0FBRnhCO0FBckI0QyxDQUE3QixDQUEzQjtBQTJCQW5CLGdCQUFnQixDQUFDSyxPQUFqQixHQUEyQlQsTUFBTSxDQUFDSyxxQkFBUCxDQUE2QjtBQUN0REMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLGVBQWUsRUFBRUwsTUFBTSxDQUFDTyxPQUFQLENBQWVlO0FBRDVCLEdBRGdEO0FBSXREWixFQUFBQSxPQUFPLEVBQUU7QUFDUEosSUFBQUEsU0FBUyw0QkFBcUJMLE9BQU8sQ0FBQ1UsR0FBUixDQUFZUCxJQUFqQztBQURGLEdBSjZDO0FBT3REUSxFQUFBQSxXQUFXLEVBQUU7QUFDWEMsSUFBQUEsS0FBSyxFQUFFYixNQUFNLENBQUNPLE9BQVAsQ0FBZU87QUFEWCxHQVB5QztBQVV0REMsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLE9BQU8sRUFBRSxNQURKO0FBRUxYLElBQUFBLGVBQWUsRUFBRSxPQUZaO0FBR0xDLElBQUFBLFNBQVMsc0JBQWVOLE1BQU0sQ0FBQ2lCLElBQVAsQ0FBWU0sR0FBM0I7QUFISixHQVYrQztBQWV0REgsRUFBQUEsUUFBUSxFQUFFO0FBQ1JkLElBQUFBLFNBQVMsNEJBQXFCTixNQUFNLENBQUNPLE9BQVAsQ0FBZUUsR0FBcEMsQ0FERDtBQUVSSixJQUFBQSxlQUFlLEVBQUVMLE1BQU0sQ0FBQ08sT0FBUCxDQUFlYztBQUZ4QjtBQWY0QyxDQUE3QixDQUEzQjtBQXFCQW5CLGdCQUFnQixDQUFDc0IsSUFBakIsR0FBd0IxQixNQUFNLENBQUNLLHFCQUFQLENBQTZCO0FBQ25EQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsZUFBZSxFQUFFO0FBRGIsR0FENkM7QUFJbkRLLEVBQUFBLE9BQU8sRUFBRSxFQUowQztBQUtuREUsRUFBQUEsV0FBVyxFQUFFO0FBQ1hDLElBQUFBLEtBQUssRUFBRWIsTUFBTSxDQUFDTyxPQUFQLENBQWVPO0FBRFgsR0FMc0M7QUFRbkRDLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxPQUFPLEVBQUU7QUFESixHQVI0QztBQVduREksRUFBQUEsUUFBUSxFQUFFO0FBQ1JmLElBQUFBLGVBQWUsRUFBRUwsTUFBTSxDQUFDTyxPQUFQLENBQWVjO0FBRHhCO0FBWHlDLENBQTdCLENBQXhCO0FBZ0JBOzs7Ozs7QUFLQSxJQUFNSSxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCLENBQUFDLFVBQVUsRUFBSTtBQUMzQyxVQUFRQSxVQUFSO0FBQ0UsU0FBSyxTQUFMO0FBQ0UsYUFBT3hCLGdCQUFnQixDQUFDSyxPQUF4Qjs7QUFDRixTQUFLLE1BQUw7QUFDRSxhQUFPTCxnQkFBZ0IsQ0FBQ3NCLElBQXhCOztBQUNGO0FBQ0UsYUFBT3RCLGdCQUFnQixXQUF2QjtBQU5KO0FBUUQsQ0FURDtBQVdBOzs7Ozs7O0FBS0EsZUFBZUgsZ0JBQWdCLENBQUMwQixzQkFBRCxDQUEvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRoZW1lciB9IGZyb20gJy4uLy4uLy4uLy4uL3RoZW1lcidcbmltcG9ydCBtZW1vaXplQ2xhc3NOYW1lIGZyb20gJy4uL3V0aWxzL21lbW9pemVDbGFzc05hbWUnXG5pbXBvcnQgc2NhbGVzIGZyb20gJy4uL2ZvdW5kYXRpb25hbC1zdHlsZXMvc2NhbGVzJ1xuaW1wb3J0IHBhbGV0dGUgZnJvbSAnLi4vZm91bmRhdGlvbmFsLXN0eWxlcy9wYWxldHRlJ1xuXG5jb25zdCBJbnB1dEFwcGVhcmFuY2VzID0ge31cblxuSW5wdXRBcHBlYXJhbmNlcy5kZWZhdWx0ID0gVGhlbWVyLmNyZWF0ZUlucHV0QXBwZWFyYW5jZSh7XG4gIGJhc2U6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjVBfSwgaW5zZXQgMCAxcHggMnB4ICR7XG4gICAgICBzY2FsZXMubmV1dHJhbC5ONEFcbiAgICB9YFxuICB9LFxuICBpbnZhbGlkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7cGFsZXR0ZS5yZWQuYmFzZX0sIGluc2V0IDAgMXB4IDJweCAke1xuICAgICAgc2NhbGVzLm5ldXRyYWwuTjRBXG4gICAgfWBcbiAgfSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAycHggJHtzY2FsZXMubmV1dHJhbC5ONEF9LCBpbnNldCAwIDAgMCAxcHggJHtcbiAgICAgIHNjYWxlcy5ibHVlLkI3XG4gICAgfSwgMCAwIDAgM3B4ICR7c2NhbGVzLmJsdWUuQjRBfWBcbiAgfSxcbiAgZGlzYWJsZWQ6IHtcbiAgICBib3hTaGFkb3c6IGBpbnNldCAwIDAgMCAxcHggJHtzY2FsZXMubmV1dHJhbC5ONEF9YCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHNjYWxlcy5uZXV0cmFsLk4yXG4gIH1cbn0pXG5cbklucHV0QXBwZWFyYW5jZXMubmV1dHJhbCA9IFRoZW1lci5jcmVhdGVJbnB1dEFwcGVhcmFuY2Uoe1xuICBiYXNlOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMkFcbiAgfSxcbiAgaW52YWxpZDoge1xuICAgIGJveFNoYWRvdzogYGluc2V0IDAgMCAwIDFweCAke3BhbGV0dGUucmVkLmJhc2V9YFxuICB9LFxuICBwbGFjZWhvbGRlcjoge1xuICAgIGNvbG9yOiBzY2FsZXMubmV1dHJhbC5ONkFcbiAgfSxcbiAgZm9jdXM6IHtcbiAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGJveFNoYWRvdzogYDAgMCAwIDJweCAke3NjYWxlcy5ibHVlLkI2QX1gXG4gIH0sXG4gIGRpc2FibGVkOiB7XG4gICAgYm94U2hhZG93OiBgaW5zZXQgMCAwIDAgMXB4ICR7c2NhbGVzLm5ldXRyYWwuTjRBfWAsXG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMlxuICB9XG59KVxuXG5JbnB1dEFwcGVhcmFuY2VzLm5vbmUgPSBUaGVtZXIuY3JlYXRlSW5wdXRBcHBlYXJhbmNlKHtcbiAgYmFzZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJ1xuICB9LFxuICBpbnZhbGlkOiB7fSxcbiAgcGxhY2Vob2xkZXI6IHtcbiAgICBjb2xvcjogc2NhbGVzLm5ldXRyYWwuTjZBXG4gIH0sXG4gIGZvY3VzOiB7XG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH0sXG4gIGRpc2FibGVkOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBzY2FsZXMubmV1dHJhbC5OMlxuICB9XG59KVxuXG4vKipcbiAqIEdldCB0aGUgYXBwZWFyYW5jZSBvZiBhIGBUZXh0SW5wdXRgLlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcGVhcmFuY2UgLSB0aGUgYXBwZWFyYW5jZSBuYW1lXG4gKiBAcmV0dXJuIHtPYmplY3R9IHRoZSBhcHBlYXJhbmNlIG9iamVjdC5cbiAqL1xuY29uc3QgZ2V0VGV4dElucHV0QXBwZWFyYW5jZSA9IGFwcGVhcmFuY2UgPT4ge1xuICBzd2l0Y2ggKGFwcGVhcmFuY2UpIHtcbiAgICBjYXNlICduZXV0cmFsJzpcbiAgICAgIHJldHVybiBJbnB1dEFwcGVhcmFuY2VzLm5ldXRyYWxcbiAgICBjYXNlICdub25lJzpcbiAgICAgIHJldHVybiBJbnB1dEFwcGVhcmFuY2VzLm5vbmVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIElucHV0QXBwZWFyYW5jZXMuZGVmYXVsdFxuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBjbGFzc05hbWUgb2YgYSBgVGV4dElucHV0YC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBlYXJhbmNlIC0gdGhlIGFwcGVhcmFuY2UgbmFtZVxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgYXBwZWFyYW5jZSBjbGFzcyBuYW1lLlxuICovXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplQ2xhc3NOYW1lKGdldFRleHRJbnB1dEFwcGVhcmFuY2UpXG4iXX0=