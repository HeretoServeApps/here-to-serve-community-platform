import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import cx from 'classnames';
import { css as glamorCss } from 'glamor';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Positioner } from '../../positioner';
import { Tooltip } from '../../tooltip';
import { Position } from '../../constants';
import PopoverStateless from './PopoverStateless';

var Popover =
/*#__PURE__*/
function (_Component) {
  _inherits(Popover, _Component);

  function Popover(props) {
    var _this;

    _classCallCheck(this, Popover);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popover).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "bringFocusInside", function () {
      // Always delay focus manipulation to just before repaint to prevent scroll jumping
      return requestAnimationFrame(function () {
        // Container ref may be undefined between component mounting and Portal rendering
        // activeElement may be undefined in some rare cases in IE
        if (_this.popoverNode == null || // eslint-disable-line eqeqeq, no-eq-null
        document.activeElement == null || // eslint-disable-line eqeqeq, no-eq-null
        !_this.state.isShown) {
          return;
        }

        var isFocusOutsideModal = !_this.popoverNode.contains(document.activeElement);

        if (isFocusOutsideModal) {
          // Element marked autofocus has higher priority than the other clowns
          var autofocusElement = _this.popoverNode.querySelector('[autofocus]');

          var wrapperElement = _this.popoverNode.querySelector('[tabindex]');

          var buttonElements = _this.popoverNode.querySelectorAll('button, a, [role="menuitem"], [role="menuitemradio"]');

          if (autofocusElement) {
            autofocusElement.focus();
          } else if (wrapperElement) {
            wrapperElement.focus();
          } else if (buttonElements.length > 0) {
            buttonElements[0].focus();
          }
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "bringFocusBackToTarget", function () {
      return requestAnimationFrame(function () {
        if (_this.popoverNode == null || // eslint-disable-line eqeqeq, no-eq-null
        document.activeElement == null // eslint-disable-line eqeqeq, no-eq-null
        ) {
            return;
          }

        var isFocusInsideModal = _this.popoverNode.contains(document.activeElement); // Bring back focus on the target.


        if (_this.targetRef && (document.activeElement === document.body || isFocusInsideModal)) {
          _this.targetRef.focus();
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onBodyClick", function (e) {
      // Ignore clicks on the popover or button
      if (_this.targetRef && _this.targetRef.contains(e.target)) {
        return;
      }

      if (_this.popoverNode && _this.popoverNode.contains(e.target)) {
        return;
      } // Notify body click


      _this.props.onBodyClick(e);

      if (_this.props.shouldCloseOnExternalClick === false) {
        return;
      }

      _this.close();
    });

    _defineProperty(_assertThisInitialized(_this), "onEsc", function (e) {
      // Esc key
      if (e.keyCode === 27) {
        _this.close();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toggle", function () {
      if (_this.state.isShown) {
        _this.close();
      } else {
        _this.open();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "open", function () {
      if (_this.state.isShown) {
        return;
      }

      _this.setState({
        isShown: true
      });

      document.body.addEventListener('click', _this.onBodyClick, false);
      document.body.addEventListener('keydown', _this.onEsc, false);

      _this.props.onOpen();
    });

    _defineProperty(_assertThisInitialized(_this), "close", function () {
      if (!_this.state.isShown) {
        return;
      }

      _this.setState({
        isShown: false
      });

      document.body.removeEventListener('click', _this.onBodyClick, false);
      document.body.removeEventListener('keydown', _this.onEsc, false);

      _this.bringFocusBackToTarget();

      _this.props.onClose();
    });

    _defineProperty(_assertThisInitialized(_this), "handleOpenComplete", function () {
      if (_this.props.bringFocusInside) _this.bringFocusInside();

      _this.props.onOpenComplete();
    });

    _defineProperty(_assertThisInitialized(_this), "handleCloseComplete", function () {
      _this.props.onCloseComplete();
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (e) {
      if (e.key === 'ArrowDown') {
        _this.bringFocusInside();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleOpenHover", function () {
      if (_this.props.trigger === 'hover') {
        _this.open();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleCloseHover", function () {
      if (_this.props.trigger === 'hover') {
        _this.close();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "renderTarget", function (_ref) {
      var getRef = _ref.getRef,
          isShown = _ref.isShown;
      var children = _this.props.children;
      var isTooltipInside = children && children.type === Tooltip;

      var getTargetRef = function getTargetRef(ref) {
        _this.targetRef = ref;
        getRef(ref);
      };
      /**
       * When a function is passed, you can control the Popover manually.
       */


      if (typeof children === 'function') {
        return children({
          toggle: _this.toggle,
          getRef: getTargetRef,
          isShown: isShown
        });
      }

      var popoverTargetProps = {
        onClick: _this.toggle,
        onMouseEnter: _this.handleOpenHover,
        onKeyDown: _this.handleKeyDown,
        role: 'button',
        'aria-expanded': isShown,
        'aria-haspopup': true
      };
      /**
       * Tooltips can be used within a Popover (not the other way around)
       * In this case the children is the Tooltip instead of a button.
       * Pass the properties to the Tooltip and let the Tooltip
       * add the properties to the target.
       */

      if (isTooltipInside) {
        return React.cloneElement(children, {
          popoverProps: _objectSpread({
            getTargetRef: getTargetRef,
            isShown: isShown
          }, popoverTargetProps)
        });
      }
      /**
       * With normal usage only popover props end up on the target.
       */


      return React.cloneElement(children, _objectSpread({
        innerRef: getTargetRef
      }, popoverTargetProps));
    });

    _this.state = {
      isShown: props.isShown
    };
    return _this;
  }

  _createClass(Popover, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.body.removeEventListener('click', this.onBodyClick, false);
      document.body.removeEventListener('keydown', this.onEsc, false);
    }
    /**
     * Methods borrowed from BlueprintJS
     * https://github.com/palantir/blueprint/blob/release/2.0.0/packages/core/src/components/overlay/overlay.tsx
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          isShown = _this$props.isShown,
          content = _this$props.content,
          display = _this$props.display,
          minWidth = _this$props.minWidth,
          position = _this$props.position,
          minHeight = _this$props.minHeight,
          _this$props$stateless = _this$props.statelessProps,
          statelessProps = _this$props$stateless === void 0 ? {} : _this$props$stateless,
          animationDuration = _this$props.animationDuration,
          onCloseComplete = _this$props.onCloseComplete;
      var stateIsShown = this.state.isShown; // If `isShown` is a boolean, popover is controlled manually, not via mouse events

      var shown = typeof isShown === 'boolean' ? isShown : stateIsShown;
      return React.createElement(Positioner, {
        target: function target(_ref2) {
          var getRef = _ref2.getRef,
              isShown = _ref2.isShown,
              targetWidth = _ref2.targetWidth;
          return _this2.renderTarget({
            getRef: getRef,
            isShown: isShown,
            targetWidth: targetWidth
          });
        },
        isShown: shown,
        position: position,
        animationDuration: animationDuration,
        onOpenComplete: this.handleOpenComplete,
        onCloseComplete: onCloseComplete
      }, function (_ref3) {
        var css = _ref3.css,
            style = _ref3.style,
            state = _ref3.state,
            getRef = _ref3.getRef;
        return React.createElement(PopoverStateless, _extends({
          innerRef: function innerRef(ref) {
            _this2.popoverNode = ref;
            getRef(ref);
          },
          "data-state": state,
          display: display,
          minWidth: minWidth,
          minHeight: minHeight
        }, statelessProps, {
          className: cx(statelessProps.className, css ? glamorCss(css).toString() : undefined),
          style: statelessProps && statelessProps.style ? _objectSpread({}, style, {}, statelessProps.style) : style,
          onMouseLeave: _this2.handleCloseHover
        }), typeof content === 'function' ? content({
          close: _this2.close
        }) : content);
      });
    }
  }]);

  return Popover;
}(Component);

Popover.displayName = "Popover";

_defineProperty(Popover, "propTypes", {
  /**
   * The position the Popover is on. Smart positioning might override this.
   */
  position: PropTypes.oneOf([Position.TOP, Position.TOP_LEFT, Position.TOP_RIGHT, Position.BOTTOM, Position.BOTTOM_LEFT, Position.BOTTOM_RIGHT, Position.LEFT, Position.RIGHT]),

  /**
   * When true, the Popover is manually shown.
   */
  isShown: PropTypes.bool,

  /**
   * Open the Popover based on click or hover. Default is click.
   */
  trigger: PropTypes.oneOf(['click', 'hover']),

  /**
   * The content of the Popover.
   */
  content: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,

  /**
   * The target button of the Popover.
   * When a function the following arguments are passed:
   * ({ toggle: Function -> Void, getRef: Function -> Ref, isShown: Bool })
   */
  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,

  /**
   * The display property passed to the Popover card.
   */
  display: PropTypes.string,

  /**
   * The min width of the Popover card.
   */
  minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * The min height of the Popover card.
   */
  minHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * Properties passed through to the Popover card.
   */
  statelessProps: PropTypes.shape(PopoverStateless.propTypes),

  /**
   * Duration of the animation.
   */
  animationDuration: PropTypes.number,

  /**
   * Function called when the Popover opens.
   */
  onOpen: PropTypes.func.isRequired,

  /**
   * Function fired when Popover closes.
   */
  onClose: PropTypes.func.isRequired,

  /**
   * Function that will be called when the enter transition is complete.
   */
  onOpenComplete: PropTypes.func.isRequired,

  /**
   * Function that will be called when the exit transition is complete.
   */
  onCloseComplete: PropTypes.func.isRequired,

  /**
   * Function that will be called when the body is clicked.
   */
  onBodyClick: PropTypes.func.isRequired,

  /**
   * When true, bring focus inside of the Popover on open.
   */
  bringFocusInside: PropTypes.bool,

  /**
   * Boolean indicating if clicking outside the dialog should close the dialog.
   */
  shouldCloseOnExternalClick: PropTypes.bool
});

_defineProperty(Popover, "defaultProps", {
  position: Position.BOTTOM,
  minWidth: 200,
  minHeight: 40,
  animationDuration: 300,
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  onOpenComplete: function onOpenComplete() {},
  onCloseComplete: function onCloseComplete() {},
  onBodyClick: function onBodyClick() {},
  bringFocusInside: false,
  shouldCloseOnExternalClick: true,
  trigger: 'click'
});

export { Popover as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wb3BvdmVyL3NyYy9Qb3BvdmVyLmpzIl0sIm5hbWVzIjpbImN4IiwiY3NzIiwiZ2xhbW9yQ3NzIiwiUmVhY3QiLCJDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJQb3NpdGlvbmVyIiwiVG9vbHRpcCIsIlBvc2l0aW9uIiwiUG9wb3ZlclN0YXRlbGVzcyIsIlBvcG92ZXIiLCJwcm9wcyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBvcG92ZXJOb2RlIiwiZG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50Iiwic3RhdGUiLCJpc1Nob3duIiwiaXNGb2N1c091dHNpZGVNb2RhbCIsImNvbnRhaW5zIiwiYXV0b2ZvY3VzRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3cmFwcGVyRWxlbWVudCIsImJ1dHRvbkVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvY3VzIiwibGVuZ3RoIiwiaXNGb2N1c0luc2lkZU1vZGFsIiwidGFyZ2V0UmVmIiwiYm9keSIsImUiLCJ0YXJnZXQiLCJvbkJvZHlDbGljayIsInNob3VsZENsb3NlT25FeHRlcm5hbENsaWNrIiwiY2xvc2UiLCJrZXlDb2RlIiwib3BlbiIsInNldFN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uRXNjIiwib25PcGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJyaW5nRm9jdXNCYWNrVG9UYXJnZXQiLCJvbkNsb3NlIiwiYnJpbmdGb2N1c0luc2lkZSIsIm9uT3BlbkNvbXBsZXRlIiwib25DbG9zZUNvbXBsZXRlIiwia2V5IiwidHJpZ2dlciIsImdldFJlZiIsImNoaWxkcmVuIiwiaXNUb29sdGlwSW5zaWRlIiwidHlwZSIsImdldFRhcmdldFJlZiIsInJlZiIsInRvZ2dsZSIsInBvcG92ZXJUYXJnZXRQcm9wcyIsIm9uQ2xpY2siLCJvbk1vdXNlRW50ZXIiLCJoYW5kbGVPcGVuSG92ZXIiLCJvbktleURvd24iLCJoYW5kbGVLZXlEb3duIiwicm9sZSIsImNsb25lRWxlbWVudCIsInBvcG92ZXJQcm9wcyIsImlubmVyUmVmIiwiY29udGVudCIsImRpc3BsYXkiLCJtaW5XaWR0aCIsInBvc2l0aW9uIiwibWluSGVpZ2h0Iiwic3RhdGVsZXNzUHJvcHMiLCJhbmltYXRpb25EdXJhdGlvbiIsInN0YXRlSXNTaG93biIsInNob3duIiwidGFyZ2V0V2lkdGgiLCJyZW5kZXJUYXJnZXQiLCJoYW5kbGVPcGVuQ29tcGxldGUiLCJzdHlsZSIsImNsYXNzTmFtZSIsInRvU3RyaW5nIiwidW5kZWZpbmVkIiwiaGFuZGxlQ2xvc2VIb3ZlciIsIm9uZU9mIiwiVE9QIiwiVE9QX0xFRlQiLCJUT1BfUklHSFQiLCJCT1RUT00iLCJCT1RUT01fTEVGVCIsIkJPVFRPTV9SSUdIVCIsIkxFRlQiLCJSSUdIVCIsImJvb2wiLCJvbmVPZlR5cGUiLCJub2RlIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJlbGVtZW50Iiwic3RyaW5nIiwibnVtYmVyIiwic2hhcGUiLCJwcm9wVHlwZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPQSxFQUFQLE1BQWUsWUFBZjtBQUNBLFNBQVNDLEdBQUcsSUFBSUMsU0FBaEIsUUFBaUMsUUFBakM7QUFDQSxPQUFPQyxLQUFQLElBQWdCQyxTQUFoQixRQUFpQyxPQUFqQztBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxTQUFTQyxVQUFULFFBQTJCLGtCQUEzQjtBQUNBLFNBQVNDLE9BQVQsUUFBd0IsZUFBeEI7QUFDQSxTQUFTQyxRQUFULFFBQXlCLGlCQUF6QjtBQUNBLE9BQU9DLGdCQUFQLE1BQTZCLG9CQUE3Qjs7SUFFcUJDLE87Ozs7O0FBa0huQixtQkFBWUMsS0FBWixFQUFtQjtBQUFBOztBQUFBOztBQUNqQixpRkFBTUEsS0FBTjs7QUFEaUIsdUVBZ0JBLFlBQU07QUFDdkI7QUFDQSxhQUFPQyxxQkFBcUIsQ0FBQyxZQUFNO0FBQ2pDO0FBQ0E7QUFDQSxZQUNFLE1BQUtDLFdBQUwsSUFBb0IsSUFBcEIsSUFBNEI7QUFDNUJDLFFBQUFB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dUZqQjs7O0FBR0FwRCxFQUFBQSxnQkFBZ0IsRUFBRXZDLFNBQVMsQ0FBQ3VGLElBMUZYOztBQTRGakI7OztBQUdBM0QsRUFBQUEsMEJBQTBCLEVBQUU1QixTQUFTLENBQUN1RjtBQS9GckIsQzs7Z0JBREFsRixPLGtCQW1HRztBQUNwQjJELEVBQUFBLFFBQVEsRUFBRTdELFFBQVEsQ0FBQytFLE1BREM7QUFFcEJuQixFQUFBQSxRQUFRLEVBQUUsR0FGVTtBQUdwQkUsRUFBQUEsU0FBUyxFQUFFLEVBSFM7QUFJcEJFLEVBQUFBLGlCQUFpQixFQUFFLEdBSkM7QUFLcEJoQyxFQUFBQSxNQUFNLEVBQUUsa0JBQU0sQ0FBRSxDQUxJO0FBTXBCRyxFQUFBQSxPQUFPLEVBQUUsbUJBQU0sQ0FBRSxDQU5HO0FBT3BCRSxFQUFBQSxjQUFjLEVBQUUsMEJBQU0sQ0FBRSxDQVBKO0FBUXBCQyxFQUFBQSxlQUFlLEVBQUUsMkJBQU0sQ0FBRSxDQVJMO0FBU3BCZCxFQUFBQSxXQUFXLEVBQUUsdUJBQU0sQ0FBRSxDQVREO0FBVXBCWSxFQUFBQSxnQkFBZ0IsRUFBRSxLQVZFO0FBV3BCWCxFQUFBQSwwQkFBMEIsRUFBRSxJQVhSO0FBWXBCZSxFQUFBQSxPQUFPLEVBQUU7QUFaVyxDOztTQW5HSHRDLE8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7IGNzcyBhcyBnbGFtb3JDc3MgfSBmcm9tICdnbGFtb3InXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyBQb3NpdGlvbmVyIH0gZnJvbSAnLi4vLi4vcG9zaXRpb25lcidcbmltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICcuLi8uLi90b29sdGlwJ1xuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuLi8uLi9jb25zdGFudHMnXG5pbXBvcnQgUG9wb3ZlclN0YXRlbGVzcyBmcm9tICcuL1BvcG92ZXJTdGF0ZWxlc3MnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcG92ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSBwb3NpdGlvbiB0aGUgUG9wb3ZlciBpcyBvbi4gU21hcnQgcG9zaXRpb25pbmcgbWlnaHQgb3ZlcnJpZGUgdGhpcy5cbiAgICAgKi9cbiAgICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAgIFBvc2l0aW9uLlRPUCxcbiAgICAgIFBvc2l0aW9uLlRPUF9MRUZULFxuICAgICAgUG9zaXRpb24uVE9QX1JJR0hULFxuICAgICAgUG9zaXRpb24uQk9UVE9NLFxuICAgICAgUG9zaXRpb24uQk9UVE9NX0xFRlQsXG4gICAgICBQb3NpdGlvbi5CT1RUT01fUklHSFQsXG4gICAgICBQb3NpdGlvbi5MRUZULFxuICAgICAgUG9zaXRpb24uUklHSFRcbiAgICBdKSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhlIFBvcG92ZXIgaXMgbWFudWFsbHkgc2hvd24uXG4gICAgICovXG4gICAgaXNTaG93bjogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgUG9wb3ZlciBiYXNlZCBvbiBjbGljayBvciBob3Zlci4gRGVmYXVsdCBpcyBjbGljay5cbiAgICAgKi9cbiAgICB0cmlnZ2VyOiBQcm9wVHlwZXMub25lT2YoWydjbGljaycsICdob3ZlciddKSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBQb3BvdmVyLlxuICAgICAqL1xuICAgIGNvbnRlbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IGJ1dHRvbiBvZiB0aGUgUG9wb3Zlci5cbiAgICAgKiBXaGVuIGEgZnVuY3Rpb24gdGhlIGZvbGxvd2luZyBhcmd1bWVudHMgYXJlIHBhc3NlZDpcbiAgICAgKiAoeyB0b2dnbGU6IEZ1bmN0aW9uIC0+IFZvaWQsIGdldFJlZjogRnVuY3Rpb24gLT4gUmVmLCBpc1Nob3duOiBCb29sIH0pXG4gICAgICovXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5lbGVtZW50LCBQcm9wVHlwZXMuZnVuY10pXG4gICAgICAuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFRoZSBkaXNwbGF5IHByb3BlcnR5IHBhc3NlZCB0byB0aGUgUG9wb3ZlciBjYXJkLlxuICAgICAqL1xuICAgIGRpc3BsYXk6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWluIHdpZHRoIG9mIHRoZSBQb3BvdmVyIGNhcmQuXG4gICAgICovXG4gICAgbWluV2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBtaW4gaGVpZ2h0IG9mIHRoZSBQb3BvdmVyIGNhcmQuXG4gICAgICovXG4gICAgbWluSGVpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIHBhc3NlZCB0aHJvdWdoIHRvIHRoZSBQb3BvdmVyIGNhcmQuXG4gICAgICovXG4gICAgc3RhdGVsZXNzUHJvcHM6IFByb3BUeXBlcy5zaGFwZShQb3BvdmVyU3RhdGVsZXNzLnByb3BUeXBlcyksXG5cbiAgICAvKipcbiAgICAgKiBEdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLlxuICAgICAqL1xuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIFBvcG92ZXIgb3BlbnMuXG4gICAgICovXG4gICAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gZmlyZWQgd2hlbiBQb3BvdmVyIGNsb3Nlcy5cbiAgICAgKi9cbiAgICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBlbnRlciB0cmFuc2l0aW9uIGlzIGNvbXBsZXRlLlxuICAgICAqL1xuICAgIG9uT3BlbkNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBleGl0IHRyYW5zaXRpb24gaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgb25DbG9zZUNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBib2R5IGlzIGNsaWNrZWQuXG4gICAgICovXG4gICAgb25Cb2R5Q2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIGJyaW5nIGZvY3VzIGluc2lkZSBvZiB0aGUgUG9wb3ZlciBvbiBvcGVuLlxuICAgICAqL1xuICAgIGJyaW5nRm9jdXNJbnNpZGU6IFByb3BUeXBlcy5ib29sLFxuXG4gICAgLyoqXG4gICAgICogQm9vbGVhbiBpbmRpY2F0aW5nIGlmIGNsaWNraW5nIG91dHNpZGUgdGhlIGRpYWxvZyBzaG91bGQgY2xvc2UgdGhlIGRpYWxvZy5cbiAgICAgKi9cbiAgICBzaG91bGRDbG9zZU9uRXh0ZXJuYWxDbGljazogUHJvcFR5cGVzLmJvb2xcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgcG9zaXRpb246IFBvc2l0aW9uLkJPVFRPTSxcbiAgICBtaW5XaWR0aDogMjAwLFxuICAgIG1pbkhlaWdodDogNDAsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IDMwMCxcbiAgICBvbk9wZW46ICgpID0+IHt9LFxuICAgIG9uQ2xvc2U6ICgpID0+IHt9LFxuICAgIG9uT3BlbkNvbXBsZXRlOiAoKSA9PiB7fSxcbiAgICBvbkNsb3NlQ29tcGxldGU6ICgpID0+IHt9LFxuICAgIG9uQm9keUNsaWNrOiAoKSA9PiB7fSxcbiAgICBicmluZ0ZvY3VzSW5zaWRlOiBmYWxzZSxcbiAgICBzaG91bGRDbG9zZU9uRXh0ZXJuYWxDbGljazogdHJ1ZSxcbiAgICB0cmlnZ2VyOiAnY2xpY2snXG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc1Nob3duOiBwcm9wcy5pc1Nob3duXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25Cb2R5Q2xpY2ssIGZhbHNlKVxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25Fc2MsIGZhbHNlKVxuICB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZHMgYm9ycm93ZWQgZnJvbSBCbHVlcHJpbnRKU1xuICAgKiBodHRwczovL2dpdGh1Yi5jb20vcGFsYW50aXIvYmx1ZXByaW50L2Jsb2IvcmVsZWFzZS8yLjAuMC9wYWNrYWdlcy9jb3JlL3NyYy9jb21wb25lbnRzL292ZXJsYXkvb3ZlcmxheS50c3hcbiAgICovXG4gIGJyaW5nRm9jdXNJbnNpZGUgPSAoKSA9PiB7XG4gICAgLy8gQWx3YXlzIGRlbGF5IGZvY3VzIG1hbmlwdWxhdGlvbiB0byBqdXN0IGJlZm9yZSByZXBhaW50IHRvIHByZXZlbnQgc2Nyb2xsIGp1bXBpbmdcbiAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIC8vIENvbnRhaW5lciByZWYgbWF5IGJlIHVuZGVmaW5lZCBiZXR3ZWVuIGNvbXBvbmVudCBtb3VudGluZyBhbmQgUG9ydGFsIHJlbmRlcmluZ1xuICAgICAgLy8gYWN0aXZlRWxlbWVudCBtYXkgYmUgdW5kZWZpbmVkIGluIHNvbWUgcmFyZSBjYXNlcyBpbiBJRVxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnBvcG92ZXJOb2RlID09IG51bGwgfHwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEsIG5vLWVxLW51bGxcbiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PSBudWxsIHx8IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxLCBuby1lcS1udWxsXG4gICAgICAgICF0aGlzLnN0YXRlLmlzU2hvd25cbiAgICAgICkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgaXNGb2N1c091dHNpZGVNb2RhbCA9ICF0aGlzLnBvcG92ZXJOb2RlLmNvbnRhaW5zKFxuICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gICAgICApXG4gICAgICBpZiAoaXNGb2N1c091dHNpZGVNb2RhbCkge1xuICAgICAgICAvLyBFbGVtZW50IG1hcmtlZCBhdXRvZm9jdXMgaGFzIGhpZ2hlciBwcmlvcml0eSB0aGFuIHRoZSBvdGhlciBjbG93bnNcbiAgICAgICAgY29uc3QgYXV0b2ZvY3VzRWxlbWVudCA9IHRoaXMucG9wb3Zlck5vZGUucXVlcnlTZWxlY3RvcignW2F1dG9mb2N1c10nKVxuICAgICAgICBjb25zdCB3cmFwcGVyRWxlbWVudCA9IHRoaXMucG9wb3Zlck5vZGUucXVlcnlTZWxlY3RvcignW3RhYmluZGV4XScpXG4gICAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnRzID0gdGhpcy5wb3BvdmVyTm9kZS5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICdidXR0b24sIGEsIFtyb2xlPVwibWVudWl0ZW1cIl0sIFtyb2xlPVwibWVudWl0ZW1yYWRpb1wiXSdcbiAgICAgICAgKVxuXG4gICAgICAgIGlmIChhdXRvZm9jdXNFbGVtZW50KSB7XG4gICAgICAgICAgYXV0b2ZvY3VzRWxlbWVudC5mb2N1cygpXG4gICAgICAgIH0gZWxzZSBpZiAod3JhcHBlckVsZW1lbnQpIHtcbiAgICAgICAgICB3cmFwcGVyRWxlbWVudC5mb2N1cygpXG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uRWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGJ1dHRvbkVsZW1lbnRzWzBdLmZvY3VzKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBicmluZ0ZvY3VzQmFja1RvVGFyZ2V0ID0gKCkgPT4ge1xuICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnBvcG92ZXJOb2RlID09IG51bGwgfHwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEsIG5vLWVxLW51bGxcbiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PSBudWxsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxLCBuby1lcS1udWxsXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGlzRm9jdXNJbnNpZGVNb2RhbCA9IHRoaXMucG9wb3Zlck5vZGUuY29udGFpbnMoXG4gICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgIClcblxuICAgICAgLy8gQnJpbmcgYmFjayBmb2N1cyBvbiB0aGUgdGFyZ2V0LlxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnRhcmdldFJlZiAmJlxuICAgICAgICAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSB8fCBpc0ZvY3VzSW5zaWRlTW9kYWwpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy50YXJnZXRSZWYuZm9jdXMoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBvbkJvZHlDbGljayA9IGUgPT4ge1xuICAgIC8vIElnbm9yZSBjbGlja3Mgb24gdGhlIHBvcG92ZXIgb3IgYnV0dG9uXG4gICAgaWYgKHRoaXMudGFyZ2V0UmVmICYmIHRoaXMudGFyZ2V0UmVmLmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucG9wb3Zlck5vZGUgJiYgdGhpcy5wb3BvdmVyTm9kZS5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIE5vdGlmeSBib2R5IGNsaWNrXG4gICAgdGhpcy5wcm9wcy5vbkJvZHlDbGljayhlKVxuXG4gICAgaWYgKHRoaXMucHJvcHMuc2hvdWxkQ2xvc2VPbkV4dGVybmFsQ2xpY2sgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLmNsb3NlKClcbiAgfVxuXG4gIG9uRXNjID0gZSA9PiB7XG4gICAgLy8gRXNjIGtleVxuICAgIGlmIChlLmtleUNvZGUgPT09IDI3KSB7XG4gICAgICB0aGlzLmNsb3NlKClcbiAgICB9XG4gIH1cblxuICB0b2dnbGUgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuc3RhdGUuaXNTaG93bikge1xuICAgICAgdGhpcy5jbG9zZSgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlbigpXG4gICAgfVxuICB9XG5cbiAgb3BlbiA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5zdGF0ZS5pc1Nob3duKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgaXNTaG93bjogdHJ1ZSB9KVxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQm9keUNsaWNrLCBmYWxzZSlcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uRXNjLCBmYWxzZSlcblxuICAgIHRoaXMucHJvcHMub25PcGVuKClcbiAgfVxuXG4gIGNsb3NlID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5zdGF0ZS5pc1Nob3duKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgaXNTaG93bjogZmFsc2UgfSlcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkJvZHlDbGljaywgZmFsc2UpXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbkVzYywgZmFsc2UpXG5cbiAgICB0aGlzLmJyaW5nRm9jdXNCYWNrVG9UYXJnZXQoKVxuICAgIHRoaXMucHJvcHMub25DbG9zZSgpXG4gIH1cblxuICBoYW5kbGVPcGVuQ29tcGxldGUgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMucHJvcHMuYnJpbmdGb2N1c0luc2lkZSkgdGhpcy5icmluZ0ZvY3VzSW5zaWRlKClcbiAgICB0aGlzLnByb3BzLm9uT3BlbkNvbXBsZXRlKClcbiAgfVxuXG4gIGhhbmRsZUNsb3NlQ29tcGxldGUgPSAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vbkNsb3NlQ29tcGxldGUoKVxuICB9XG5cbiAgaGFuZGxlS2V5RG93biA9IGUgPT4ge1xuICAgIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgIHRoaXMuYnJpbmdGb2N1c0luc2lkZSgpXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlT3BlbkhvdmVyID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLnRyaWdnZXIgPT09ICdob3ZlcicpIHtcbiAgICAgIHRoaXMub3BlbigpXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQ2xvc2VIb3ZlciA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy50cmlnZ2VyID09PSAnaG92ZXInKSB7XG4gICAgICB0aGlzLmNsb3NlKClcbiAgICB9XG4gIH1cblxuICByZW5kZXJUYXJnZXQgPSAoeyBnZXRSZWYsIGlzU2hvd24gfSkgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHNcbiAgICBjb25zdCBpc1Rvb2x0aXBJbnNpZGUgPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi50eXBlID09PSBUb29sdGlwXG5cbiAgICBjb25zdCBnZXRUYXJnZXRSZWYgPSByZWYgPT4ge1xuICAgICAgdGhpcy50YXJnZXRSZWYgPSByZWZcbiAgICAgIGdldFJlZihyZWYpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBhIGZ1bmN0aW9uIGlzIHBhc3NlZCwgeW91IGNhbiBjb250cm9sIHRoZSBQb3BvdmVyIG1hbnVhbGx5LlxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbih7XG4gICAgICAgIHRvZ2dsZTogdGhpcy50b2dnbGUsXG4gICAgICAgIGdldFJlZjogZ2V0VGFyZ2V0UmVmLFxuICAgICAgICBpc1Nob3duXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IHBvcG92ZXJUYXJnZXRQcm9wcyA9IHtcbiAgICAgIG9uQ2xpY2s6IHRoaXMudG9nZ2xlLFxuICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU9wZW5Ib3ZlcixcbiAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgcm9sZTogJ2J1dHRvbicsXG4gICAgICAnYXJpYS1leHBhbmRlZCc6IGlzU2hvd24sXG4gICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb29sdGlwcyBjYW4gYmUgdXNlZCB3aXRoaW4gYSBQb3BvdmVyIChub3QgdGhlIG90aGVyIHdheSBhcm91bmQpXG4gICAgICogSW4gdGhpcyBjYXNlIHRoZSBjaGlsZHJlbiBpcyB0aGUgVG9vbHRpcCBpbnN0ZWFkIG9mIGEgYnV0dG9uLlxuICAgICAqIFBhc3MgdGhlIHByb3BlcnRpZXMgdG8gdGhlIFRvb2x0aXAgYW5kIGxldCB0aGUgVG9vbHRpcFxuICAgICAqIGFkZCB0aGUgcHJvcGVydGllcyB0byB0aGUgdGFyZ2V0LlxuICAgICAqL1xuICAgIGlmIChpc1Rvb2x0aXBJbnNpZGUpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgcG9wb3ZlclByb3BzOiB7XG4gICAgICAgICAgZ2V0VGFyZ2V0UmVmLFxuICAgICAgICAgIGlzU2hvd24sXG5cbiAgICAgICAgICAvLyBUaGVzZSBwcm9wZXRpZXMgd2lsbCBiZSBzcHJlYWQgYXMgYHBvcG92ZXJUYXJnZXRQcm9wc2BcbiAgICAgICAgICAvLyBpbiB0aGUgVG9vbHRpcCBjb21wb25lbnQuXG4gICAgICAgICAgLi4ucG9wb3ZlclRhcmdldFByb3BzXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2l0aCBub3JtYWwgdXNhZ2Ugb25seSBwb3BvdmVyIHByb3BzIGVuZCB1cCBvbiB0aGUgdGFyZ2V0LlxuICAgICAqL1xuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgIGlubmVyUmVmOiBnZXRUYXJnZXRSZWYsXG4gICAgICAuLi5wb3BvdmVyVGFyZ2V0UHJvcHNcbiAgICB9KVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzU2hvd24sXG4gICAgICBjb250ZW50LFxuICAgICAgZGlzcGxheSxcbiAgICAgIG1pbldpZHRoLFxuICAgICAgcG9zaXRpb24sXG4gICAgICBtaW5IZWlnaHQsXG4gICAgICBzdGF0ZWxlc3NQcm9wcyA9IHt9LFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICBvbkNsb3NlQ29tcGxldGVcbiAgICB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgaXNTaG93bjogc3RhdGVJc1Nob3duIH0gPSB0aGlzLnN0YXRlXG5cbiAgICAvLyBJZiBgaXNTaG93bmAgaXMgYSBib29sZWFuLCBwb3BvdmVyIGlzIGNvbnRyb2xsZWQgbWFudWFsbHksIG5vdCB2aWEgbW91c2UgZXZlbnRzXG4gICAgY29uc3Qgc2hvd24gPSB0eXBlb2YgaXNTaG93biA9PT0gJ2Jvb2xlYW4nID8gaXNTaG93biA6IHN0YXRlSXNTaG93blxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxQb3NpdGlvbmVyXG4gICAgICAgIHRhcmdldD17KHsgZ2V0UmVmLCBpc1Nob3duLCB0YXJnZXRXaWR0aCB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyVGFyZ2V0KHsgZ2V0UmVmLCBpc1Nob3duLCB0YXJnZXRXaWR0aCB9KVxuICAgICAgICB9fVxuICAgICAgICBpc1Nob3duPXtzaG93bn1cbiAgICAgICAgcG9zaXRpb249e3Bvc2l0aW9ufVxuICAgICAgICBhbmltYXRpb25EdXJhdGlvbj17YW5pbWF0aW9uRHVyYXRpb259XG4gICAgICAgIG9uT3BlbkNvbXBsZXRlPXt0aGlzLmhhbmRsZU9wZW5Db21wbGV0ZX1cbiAgICAgICAgb25DbG9zZUNvbXBsZXRlPXtvbkNsb3NlQ29tcGxldGV9XG4gICAgICA+XG4gICAgICAgIHsoeyBjc3MsIHN0eWxlLCBzdGF0ZSwgZ2V0UmVmIH0pID0+IChcbiAgICAgICAgICA8UG9wb3ZlclN0YXRlbGVzc1xuICAgICAgICAgICAgaW5uZXJSZWY9e3JlZiA9PiB7XG4gICAgICAgICAgICAgIHRoaXMucG9wb3Zlck5vZGUgPSByZWZcbiAgICAgICAgICAgICAgZ2V0UmVmKHJlZilcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBkYXRhLXN0YXRlPXtzdGF0ZX1cbiAgICAgICAgICAgIGRpc3BsYXk9e2Rpc3BsYXl9XG4gICAgICAgICAgICBtaW5XaWR0aD17bWluV2lkdGh9XG4gICAgICAgICAgICBtaW5IZWlnaHQ9e21pbkhlaWdodH1cbiAgICAgICAgICAgIHsuLi5zdGF0ZWxlc3NQcm9wc31cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goXG4gICAgICAgICAgICAgIHN0YXRlbGVzc1Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgY3NzID8gZ2xhbW9yQ3NzKGNzcykudG9TdHJpbmcoKSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHN0eWxlPXtcbiAgICAgICAgICAgICAgc3RhdGVsZXNzUHJvcHMgJiYgc3RhdGVsZXNzUHJvcHMuc3R5bGVcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgICAgICAgICAgICAgIC4uLnN0YXRlbGVzc1Byb3BzLnN0eWxlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiBzdHlsZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLmhhbmRsZUNsb3NlSG92ZXJ9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3R5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgID8gY29udGVudCh7IGNsb3NlOiB0aGlzLmNsb3NlIH0pXG4gICAgICAgICAgICAgIDogY29udGVudH1cbiAgICAgICAgICA8L1BvcG92ZXJTdGF0ZWxlc3M+XG4gICAgICAgICl9XG4gICAgICA8L1Bvc2l0aW9uZXI+XG4gICAgKVxuICB9XG59XG4iXX0=