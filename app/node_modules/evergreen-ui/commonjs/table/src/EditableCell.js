"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _theme = require("../../theme");

var _portal = require("../../portal");

var _stack = require("../../stack");

var _safeInvoke = _interopRequireDefault(require("../../lib/safe-invoke"));

var _TextTableCell = _interopRequireDefault(require("./TextTableCell"));

var _TableCell = _interopRequireDefault(require("./TableCell"));

var _EditableCellField = _interopRequireDefault(require("./EditableCellField"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var EditableCell =
/*#__PURE__*/
function (_React$PureComponent) {
  (0, _inherits2["default"])(EditableCell, _React$PureComponent);

  function EditableCell() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, EditableCell);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(EditableCell)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      value: _this.props.children,
      isEditing: _this.props.autoFocus
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onMainRef", function (ref) {
      _this.mainRef = ref;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onOverlayRef", function (ref) {
      _this.overlayRef = ref;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleDoubleClick", function () {
      if (_this.props.disabled || !_this.props.isSelectable) return;

      _this.setState({
        isEditing: true
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleKeyDown", function (e) {
      if (_this.props.disabled) return;
      var key = e.key;
      /**
       * When the user presses a character on the keyboard, use that character
       * as the value in the text field.
       */

      if (key === 'Enter' || key === 'Shift') {
        _this.setState({
          isEditing: true
        });
      } else if (key.match(/^[a-z]{0,10}$/) && !e.metaKey && !e.ctrlKey && !e.altKey) {
        _this.setState(function (prevState) {
          return {
            isEditing: true,
            value: prevState.value + key
          };
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleFieldChangeComplete", function (value) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          isSelectable = _this$props.isSelectable;

      _this.setState({
        isEditing: false,
        value: value
      });

      (0, _safeInvoke["default"])(onChange, value);

      if (_this.mainRef && isSelectable) {
        _this.mainRef.focus();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleFieldCancel", function () {
      _this.setState({
        isEditing: false
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleClick", function () {
      _this.mainRef.focus();
    });
    return _this;
  }

  (0, _createClass2["default"])(EditableCell, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          theme = _this$props2.theme,
          size = _this$props2.size,
          disabled = _this$props2.disabled,
          placeholder = _this$props2.placeholder,
          isSelectable = _this$props2.isSelectable,
          _this$props2$textProp = _this$props2.textProps,
          textProps = _this$props2$textProp === void 0 ? {} : _this$props2$textProp,
          props = (0, _objectWithoutProperties2["default"])(_this$props2, ["children", "theme", "size", "disabled", "placeholder", "isSelectable", "textProps"]);
      var _this$state = this.state,
          isEditing = _this$state.isEditing,
          value = _this$state.value;
      var cursor = 'text';

      if (disabled) {
        cursor = 'not-allowed';
      } else if (isSelectable) {
        cursor = 'default';
      }

      return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_TextTableCell["default"], (0, _extends2["default"])({
        innerRef: this.onMainRef,
        isSelectable: isSelectable,
        onClick: this.handleClick,
        onDoubleClick: this.handleDoubleClick,
        onKeyDown: this.handleKeyDown,
        cursor: cursor,
        textProps: _objectSpread({
          size: size,
          opacity: disabled || !children && placeholder ? 0.5 : 1
        }, textProps)
      }, props), children ? children : placeholder), isEditing && _react["default"].createElement(_portal.Portal, null, _react["default"].createElement(_stack.Stack, null, function (zIndex) {
        return _react["default"].createElement(_EditableCellField["default"], {
          zIndex: zIndex,
          getTargetRef: function getTargetRef() {
            return _this2.mainRef;
          },
          value: value,
          onEscape: _this2.handleFieldEscape,
          onChangeComplete: _this2.handleFieldChangeComplete,
          onCancel: _this2.handleFieldCancel,
          size: size
        });
      })));
    }
  }]);
  return EditableCell;
}(_react["default"].PureComponent);

EditableCell.displayName = "EditableCell";
(0, _defineProperty2["default"])(EditableCell, "propTypes", _objectSpread({}, _TableCell["default"].propTypes, {
  /*
   * Makes the TableCell focusable.
   * Will add tabIndex={-1 || this.props.tabIndex}.
   */
  isSelectable: _propTypes["default"].bool.isRequired,

  /**
   * When true, the cell can't be edited.
   */
  disabled: _propTypes["default"].bool,

  /**
   * Optional placeholder when children is falsy.
   */
  placeholder: _propTypes["default"].node,

  /**
   * The size used for the TextTableCell and Textarea.
   */
  size: _propTypes["default"].oneOf([300, 400]).isRequired,

  /**
   * This is the value of the cell.
   */
  children: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),

  /**
   * Function called when value changes. (value: string) => void.
   */
  onChange: _propTypes["default"].func,

  /**
   * When true, the cell will initialize in the editing state.
   */
  autoFocus: _propTypes["default"].bool
}));
(0, _defineProperty2["default"])(EditableCell, "defaultProps", {
  size: 300,
  isSelectable: true,
  autoFocus: false
});

var _default = (0, _theme.withTheme)(EditableCell);

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90YWJsZS9zcmMvRWRpdGFibGVDZWxsLmpzIl0sIm5hbWVzIjpbIkVkaXRhYmxlQ2VsbCIsInZhbHVlIiwicHJvcHMiLCJjaGlsZHJlbiIsImlzRWRpdGluZyIsImF1dG9Gb2N1cyIsInJlZiIsIm1haW5SZWYiLCJvdmVybGF5UmVmIiwiZGlzYWJsZWQiLCJpc1NlbGVjdGFibGUiLCJzZXRTdGF0ZSIsImUiLCJrZXkiLCJtYXRjaCIsIm1ldGFLZXkiLCJjdHJsS2V5IiwiYWx0S2V5IiwicHJldlN0YXRlIiwib25DaGFuZ2UiLCJmb2N1cyIsInRoZW1lIiwic2l6ZSIsInBsYWNlaG9sZGVyIiwidGV4dFByb3BzIiwic3RhdGUiLCJjdXJzb3IiLCJvbk1haW5SZWYiLCJoYW5kbGVDbGljayIsImhhbmRsZURvdWJsZUNsaWNrIiwiaGFuZGxlS2V5RG93biIsIm9wYWNpdHkiLCJ6SW5kZXgiLCJoYW5kbGVGaWVsZEVzY2FwZSIsImhhbmRsZUZpZWxkQ2hhbmdlQ29tcGxldGUiLCJoYW5kbGVGaWVsZENhbmNlbCIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIlRhYmxlQ2VsbCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImJvb2wiLCJpc1JlcXVpcmVkIiwibm9kZSIsIm9uZU9mIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibnVtYmVyIiwiZnVuYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztJQUVNQSxZOzs7Ozs7Ozs7Ozs7Ozs7Ozs4RkFrREk7QUFDTkMsTUFBQUEsS0FBSyxFQUFFLE1BQUtDLEtBQUwsQ0FBV0MsUUFEWjtBQUVOQyxNQUFBQSxTQUFTLEVBQUUsTUFBS0YsS0FBTCxDQUFXRztBQUZoQixLO2tHQUtJLFVBQUFDLEdBQUcsRUFBSTtBQUNqQixZQUFLQyxPQUFMLEdBQWVELEdBQWY7QUFDRCxL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QUFoQixFQUE0QkYsVTs7QUFFbEM7OztBQUdBdkMsRUFBQUEsUUFBUSxFQUFFcUMsc0JBQVVLLFNBQVYsQ0FBb0IsQ0FBQ0wsc0JBQVVNLE1BQVgsRUFBbUJOLHNCQUFVTyxNQUE3QixDQUFwQixDOztBQUVWOzs7QUFHQTVCLEVBQUFBLFFBQVEsRUFBRXFCLHNCQUFVUSxJOztBQUVwQjs7O0FBR0EzQyxFQUFBQSxTQUFTLEVBQUVtQyxzQkFBVUM7O2lDQXpDbkJ6QyxZLGtCQTRDa0I7QUFDcEJzQixFQUFBQSxJQUFJLEVBQUUsR0FEYztBQUVwQlosRUFBQUEsWUFBWSxFQUFFLElBRk07QUFHcEJMLEVBQUFBLFNBQVMsRUFBRTtBQUhTLEM7O2VBdUlULHNCQUFVTCxZQUFWLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi90aGVtZSdcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gJy4uLy4uL3BvcnRhbCdcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi4vLi4vc3RhY2snXG5pbXBvcnQgc2FmZUludm9rZSBmcm9tICcuLi8uLi9saWIvc2FmZS1pbnZva2UnXG5pbXBvcnQgVGV4dFRhYmxlQ2VsbCBmcm9tICcuL1RleHRUYWJsZUNlbGwnXG5pbXBvcnQgVGFibGVDZWxsIGZyb20gJy4vVGFibGVDZWxsJ1xuaW1wb3J0IEVkaXRhYmxlQ2VsbEZpZWxkIGZyb20gJy4vRWRpdGFibGVDZWxsRmllbGQnXG5cbmNsYXNzIEVkaXRhYmxlQ2VsbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8qKlxuICAgICAqIENvbXBvc2VzIHRoZSBUYWJsZUNlbGwgY29tcG9uZW50IGFzIHRoZSBiYXNlLlxuICAgICAqL1xuICAgIC4uLlRhYmxlQ2VsbC5wcm9wVHlwZXMsXG5cbiAgICAvKlxuICAgICAqIE1ha2VzIHRoZSBUYWJsZUNlbGwgZm9jdXNhYmxlLlxuICAgICAqIFdpbGwgYWRkIHRhYkluZGV4PXstMSB8fCB0aGlzLnByb3BzLnRhYkluZGV4fS5cbiAgICAgKi9cbiAgICBpc1NlbGVjdGFibGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHRoZSBjZWxsIGNhbid0IGJlIGVkaXRlZC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25hbCBwbGFjZWhvbGRlciB3aGVuIGNoaWxkcmVuIGlzIGZhbHN5LlxuICAgICAqL1xuICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMubm9kZSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBzaXplIHVzZWQgZm9yIHRoZSBUZXh0VGFibGVDZWxsIGFuZCBUZXh0YXJlYS5cbiAgICAgKi9cbiAgICBzaXplOiBQcm9wVHlwZXMub25lT2YoWzMwMCwgNDAwXSkuaXNSZXF1aXJlZCxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIHZhbHVlIG9mIHRoZSBjZWxsLlxuICAgICAqL1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiBjYWxsZWQgd2hlbiB2YWx1ZSBjaGFuZ2VzLiAodmFsdWU6IHN0cmluZykgPT4gdm9pZC5cbiAgICAgKi9cbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHRoZSBjZWxsIHdpbGwgaW5pdGlhbGl6ZSBpbiB0aGUgZWRpdGluZyBzdGF0ZS5cbiAgICAgKi9cbiAgICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sXG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHNpemU6IDMwMCxcbiAgICBpc1NlbGVjdGFibGU6IHRydWUsXG4gICAgYXV0b0ZvY3VzOiBmYWxzZVxuICB9XG5cbiAgc3RhdGUgPSB7XG4gICAgdmFsdWU6IHRoaXMucHJvcHMuY2hpbGRyZW4sXG4gICAgaXNFZGl0aW5nOiB0aGlzLnByb3BzLmF1dG9Gb2N1c1xuICB9XG5cbiAgb25NYWluUmVmID0gcmVmID0+IHtcbiAgICB0aGlzLm1haW5SZWYgPSByZWZcbiAgfVxuXG4gIG9uT3ZlcmxheVJlZiA9IHJlZiA9PiB7XG4gICAgdGhpcy5vdmVybGF5UmVmID0gcmVmXG4gIH1cblxuICBoYW5kbGVEb3VibGVDbGljayA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlZCB8fCAhdGhpcy5wcm9wcy5pc1NlbGVjdGFibGUpIHJldHVyblxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0VkaXRpbmc6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgaGFuZGxlS2V5RG93biA9IGUgPT4ge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkKSByZXR1cm5cbiAgICBjb25zdCB7IGtleSB9ID0gZVxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgdXNlciBwcmVzc2VzIGEgY2hhcmFjdGVyIG9uIHRoZSBrZXlib2FyZCwgdXNlIHRoYXQgY2hhcmFjdGVyXG4gICAgICogYXMgdGhlIHZhbHVlIGluIHRoZSB0ZXh0IGZpZWxkLlxuICAgICAqL1xuICAgIGlmIChrZXkgPT09ICdFbnRlcicgfHwga2V5ID09PSAnU2hpZnQnKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNFZGl0aW5nOiB0cnVlXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBrZXkubWF0Y2goL15bYS16XXswLDEwfSQvKSAmJlxuICAgICAgIWUubWV0YUtleSAmJlxuICAgICAgIWUuY3RybEtleSAmJlxuICAgICAgIWUuYWx0S2V5XG4gICAgKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoe1xuICAgICAgICBpc0VkaXRpbmc6IHRydWUsXG4gICAgICAgIHZhbHVlOiBwcmV2U3RhdGUudmFsdWUgKyBrZXlcbiAgICAgIH0pKVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUZpZWxkQ2hhbmdlQ29tcGxldGUgPSB2YWx1ZSA9PiB7XG4gICAgY29uc3QgeyBvbkNoYW5nZSwgaXNTZWxlY3RhYmxlIH0gPSB0aGlzLnByb3BzXG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRWRpdGluZzogZmFsc2UsXG4gICAgICB2YWx1ZVxuICAgIH0pXG5cbiAgICBzYWZlSW52b2tlKG9uQ2hhbmdlLCB2YWx1ZSlcblxuICAgIGlmICh0aGlzLm1haW5SZWYgJiYgaXNTZWxlY3RhYmxlKSB7XG4gICAgICB0aGlzLm1haW5SZWYuZm9jdXMoKVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUZpZWxkQ2FuY2VsID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0VkaXRpbmc6IGZhbHNlIH0pXG4gIH1cblxuICBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICB0aGlzLm1haW5SZWYuZm9jdXMoKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgdGhlbWUsXG4gICAgICBzaXplLFxuICAgICAgZGlzYWJsZWQsXG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIGlzU2VsZWN0YWJsZSxcbiAgICAgIHRleHRQcm9wcyA9IHt9LFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wc1xuICAgIGNvbnN0IHsgaXNFZGl0aW5nLCB2YWx1ZSB9ID0gdGhpcy5zdGF0ZVxuXG4gICAgbGV0IGN1cnNvciA9ICd0ZXh0J1xuICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgY3Vyc29yID0gJ25vdC1hbGxvd2VkJ1xuICAgIH0gZWxzZSBpZiAoaXNTZWxlY3RhYmxlKSB7XG4gICAgICBjdXJzb3IgPSAnZGVmYXVsdCdcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8VGV4dFRhYmxlQ2VsbFxuICAgICAgICAgIGlubmVyUmVmPXt0aGlzLm9uTWFpblJlZn1cbiAgICAgICAgICBpc1NlbGVjdGFibGU9e2lzU2VsZWN0YWJsZX1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfVxuICAgICAgICAgIG9uRG91YmxlQ2xpY2s9e3RoaXMuaGFuZGxlRG91YmxlQ2xpY2t9XG4gICAgICAgICAgb25LZXlEb3duPXt0aGlzLmhhbmRsZUtleURvd259XG4gICAgICAgICAgY3Vyc29yPXtjdXJzb3J9XG4gICAgICAgICAgdGV4dFByb3BzPXt7XG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgb3BhY2l0eTogZGlzYWJsZWQgfHwgKCFjaGlsZHJlbiAmJiBwbGFjZWhvbGRlcikgPyAwLjUgOiAxLFxuICAgICAgICAgICAgLi4udGV4dFByb3BzXG4gICAgICAgICAgfX1cbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgID5cbiAgICAgICAgICB7Y2hpbGRyZW4gPyBjaGlsZHJlbiA6IHBsYWNlaG9sZGVyfVxuICAgICAgICA8L1RleHRUYWJsZUNlbGw+XG4gICAgICAgIHtpc0VkaXRpbmcgJiYgKFxuICAgICAgICAgIDxQb3J0YWw+XG4gICAgICAgICAgICA8U3RhY2s+XG4gICAgICAgICAgICAgIHt6SW5kZXggPT4gKFxuICAgICAgICAgICAgICAgIDxFZGl0YWJsZUNlbGxGaWVsZFxuICAgICAgICAgICAgICAgICAgekluZGV4PXt6SW5kZXh9XG4gICAgICAgICAgICAgICAgICBnZXRUYXJnZXRSZWY9eygpID0+IHRoaXMubWFpblJlZn1cbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgICAgICAgIG9uRXNjYXBlPXt0aGlzLmhhbmRsZUZpZWxkRXNjYXBlfVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2VDb21wbGV0ZT17dGhpcy5oYW5kbGVGaWVsZENoYW5nZUNvbXBsZXRlfVxuICAgICAgICAgICAgICAgICAgb25DYW5jZWw9e3RoaXMuaGFuZGxlRmllbGRDYW5jZWx9XG4gICAgICAgICAgICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L1N0YWNrPlxuICAgICAgICAgIDwvUG9ydGFsPlxuICAgICAgICApfVxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEVkaXRhYmxlQ2VsbClcbiJdfQ==